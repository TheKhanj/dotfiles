#!/usr/bin/env sh

tty -s
IS_TTY=$?
DICTIONARY="$HOME/.cache/dictionary/dictionary.json"
CACHED_WORDS="$HOME/.cache/dictionary/cached_words"
PRONOUNCIATIONS="$HOME/.cache/dictionary/pronounciations"

log() {
	local message="$1"

	[ "$IS_TTY" -eq 0 ] &&
		echo "$message" >&2 ||
		notify-send "Dictionary" "$message"
}

prompt_word() {
	local prompt='Select word: '
	local word

	if [ "$IS_TTY" -eq 0 ]; then
		word=$(fzf --prompt "$prompt" <"$CACHED_WORDS")
	else
		word=$(dmenu -p "$propmp" <"$CACHED_WORDS")
	fi

	[ -z "$word" ] && {
		log "Word not selected"
		return 1
	}

	echo "$word"
}

pager() {
	local stdin="$(cat)"
	[ -z "$stdin" ] && return 1

	local p="${PAGER:-less}"

	[ "$IS_TTY" -eq 0 ] && {
		echo "$stdin" | $p
		return 0
	}

	local tmp="$(mktemp -u)"
	echo "$stdin" >"$tmp"

	xfce4-terminal -e "bash -c '. \"$HOME/.profile\"; $p \"$tmp\"; rm \"$tmp\"'"
}

assert_not_null() {
	local input="$1"

	local lines_count=$(echo "$input" | wc -l)
	echo "$input" | grep '^null$' 2>&1 >/dev/null
	local found_null_word="$?"

	[ "$lines_count" -eq 1 ] &&
		[ "$found_null_word" -eq 0 ]
	local is_null=$?

	[ "$is_null" -ne 0 ] &&
		return 0

	log "Word not found"
	return 1
}

assert_dictionary() {
	[ -f "$DICTIONARY" ] && return 0

	mkdir -p "$(dirname "$DICTIONARY")" || return 1
	log 'Downloading dictionary'
	curl -o "$DICTIONARY" \
		'https://raw.githubusercontent.com/matthewreagan/WebstersEnglishDictionary/master/dictionary.json'
	log 'Dictionary downloaded'
}

assert_word_cache() {
	[ -f "$CACHED_WORDS" ] && return 0

	jq '. | keys | .[]' -r <"$DICTIONARY" >"$CACHED_WORDS"
}

assert_pronounciations() {
	[ -f "$PRONOUNCIATIONS" ] && return 0

	mkdir -p "$(dirname "$PRONOUNCIATIONS")" || return 1
	log 'Downloading pronounciations'
	curl -o "$PRONOUNCIATIONS" \
		"https://raw.githubusercontent.com/open-dict-data/ipa-dict/master/data/en_US.txt"
	log 'Pronounciations downloaded'
}

assert_dictionary || {
	log "Failed asserting dictionary"
	exit 1
}

assert_word_cache || {
	log "Failed asserting word cache"
	exit 1
}

assert_pronounciations || {
	log "Failed asserting pronounciations"
	exit 1
}

format() {
	local step1="$(cat | sed -E 's/ ([0-9]+\.)/\n\1/g')"

	echo "$step1" | while read -r line; do
		echo "$line" | grep '^[0-9]\+\.' 2>&1 >/dev/null
		starts_with_number=$?

		[ "$starts_with_number" -eq 0 ] && {
			echo "$line" |
				fmt -t -w73 -g73
			continue
		}

		echo "$line" |
			sed 's/; /.\n/g' |
			awk '{ print toupper(substr($0,1,1)) substr($0,2) }' |
			sed -E 's/(.*)/- \1/' |
			sed -E 's/^- $//' |
			fmt -s
	done
}

get_pronounciation() {
	local word="$1"

	cat "$PRONOUNCIATIONS" |
		grep "^$word" |
		head -n 1 |
		awk '{ print $2 }'
}

main() {
	local word="${1:-$(prompt_word)}"
	[ -z "$word" ] && exit 1

	local meaning="$(jq ".$word" -r <"$DICTIONARY")"
	[ -z "$meaning" ] && exit 1

	assert_not_null "$meaning" || exit 1

	local pronounciation="$(get_pronounciation "$word")"
	[ -n "$pronounciation" ] && {
		echo "Pronounciation: $pronounciation"
		echo
	}

	echo "$meaning" | format
}

main $@ | pager
